// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	douyinuser "mydouyin/kitex_gen/douyinuser"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*douyinuser.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser": kitex.NewMethodInfo(createUserHandler, newUserServiceCreateUserArgs, newUserServiceCreateUserResult, false),
		"CheckUser":  kitex.NewMethodInfo(checkUserHandler, newUserServiceCheckUserArgs, newUserServiceCheckUserResult, false),
		"MGetUser":   kitex.NewMethodInfo(mGetUserHandler, newUserServiceMGetUserArgs, newUserServiceMGetUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyinuser",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinuser.UserServiceCreateUserArgs)
	realResult := result.(*douyinuser.UserServiceCreateUserResult)
	success, err := handler.(douyinuser.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return douyinuser.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return douyinuser.NewUserServiceCreateUserResult()
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinuser.UserServiceCheckUserArgs)
	realResult := result.(*douyinuser.UserServiceCheckUserResult)
	success, err := handler.(douyinuser.UserService).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCheckUserArgs() interface{} {
	return douyinuser.NewUserServiceCheckUserArgs()
}

func newUserServiceCheckUserResult() interface{} {
	return douyinuser.NewUserServiceCheckUserResult()
}

func mGetUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinuser.UserServiceMGetUserArgs)
	realResult := result.(*douyinuser.UserServiceMGetUserResult)
	success, err := handler.(douyinuser.UserService).MGetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMGetUserArgs() interface{} {
	return douyinuser.NewUserServiceMGetUserArgs()
}

func newUserServiceMGetUserResult() interface{} {
	return douyinuser.NewUserServiceMGetUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *douyinuser.CreateUserRequest) (r *douyinuser.CreateUserResponse, err error) {
	var _args douyinuser.UserServiceCreateUserArgs
	_args.Req = req
	var _result douyinuser.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, req *douyinuser.CheckUserRequest) (r *douyinuser.CheckUserResponse, err error) {
	var _args douyinuser.UserServiceCheckUserArgs
	_args.Req = req
	var _result douyinuser.UserServiceCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUser(ctx context.Context, req *douyinuser.MGetUserRequest) (r *douyinuser.MGetUserResponse, err error) {
	var _args douyinuser.UserServiceMGetUserArgs
	_args.Req = req
	var _result douyinuser.UserServiceMGetUserResult
	if err = p.c.Call(ctx, "MGetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
