// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "mydouyin/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateMessage":   kitex.NewMethodInfo(createMessageHandler, newMessageServiceCreateMessageArgs, newMessageServiceCreateMessageResult, false),
		"GetMessageList":  kitex.NewMethodInfo(getMessageListHandler, newMessageServiceGetMessageListArgs, newMessageServiceGetMessageListResult, false),
		"GetFirstMessage": kitex.NewMethodInfo(getFirstMessageHandler, newMessageServiceGetFirstMessageArgs, newMessageServiceGetFirstMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceCreateMessageArgs)
	realResult := result.(*message.MessageServiceCreateMessageResult)
	success, err := handler.(message.MessageService).CreateMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceCreateMessageArgs() interface{} {
	return message.NewMessageServiceCreateMessageArgs()
}

func newMessageServiceCreateMessageResult() interface{} {
	return message.NewMessageServiceCreateMessageResult()
}

func getMessageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceGetMessageListArgs)
	realResult := result.(*message.MessageServiceGetMessageListResult)
	success, err := handler.(message.MessageService).GetMessageList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetMessageListArgs() interface{} {
	return message.NewMessageServiceGetMessageListArgs()
}

func newMessageServiceGetMessageListResult() interface{} {
	return message.NewMessageServiceGetMessageListResult()
}

func getFirstMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceGetFirstMessageArgs)
	realResult := result.(*message.MessageServiceGetFirstMessageResult)
	success, err := handler.(message.MessageService).GetFirstMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetFirstMessageArgs() interface{} {
	return message.NewMessageServiceGetFirstMessageArgs()
}

func newMessageServiceGetFirstMessageResult() interface{} {
	return message.NewMessageServiceGetFirstMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateMessage(ctx context.Context, req *message.CreateMessageRequest) (r *message.CreateMessageResponse, err error) {
	var _args message.MessageServiceCreateMessageArgs
	_args.Req = req
	var _result message.MessageServiceCreateMessageResult
	if err = p.c.Call(ctx, "CreateMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMessageList(ctx context.Context, req *message.GetMessageListRequest) (r *message.GetMessageListResponse, err error) {
	var _args message.MessageServiceGetMessageListArgs
	_args.Req = req
	var _result message.MessageServiceGetMessageListResult
	if err = p.c.Call(ctx, "GetMessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFirstMessage(ctx context.Context, req *message.GetFirstMessageRequest) (r *message.GetFirstMessageResponse, err error) {
	var _args message.MessageServiceGetFirstMessageArgs
	_args.Req = req
	var _result message.MessageServiceGetFirstMessageResult
	if err = p.c.Call(ctx, "GetFirstMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
