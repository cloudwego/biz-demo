// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	douyinvideo "mydouyin/kitex_gen/douyinvideo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*douyinvideo.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideo":   kitex.NewMethodInfo(createVideoHandler, newVideoServiceCreateVideoArgs, newVideoServiceCreateVideoResult, false),
		"GetFeed":       kitex.NewMethodInfo(getFeedHandler, newVideoServiceGetFeedArgs, newVideoServiceGetFeedResult, false),
		"GetList":       kitex.NewMethodInfo(getListHandler, newVideoServiceGetListArgs, newVideoServiceGetListResult, false),
		"MGetVideoUser": kitex.NewMethodInfo(mGetVideoUserHandler, newVideoServiceMGetVideoUserArgs, newVideoServiceMGetVideoUserResult, false),
		"DeleteVideo":   kitex.NewMethodInfo(deleteVideoHandler, newVideoServiceDeleteVideoArgs, newVideoServiceDeleteVideoResult, false),
		"GetTimeVideos": kitex.NewMethodInfo(getTimeVideosHandler, newVideoServiceGetTimeVideosArgs, newVideoServiceGetTimeVideosResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyinvideo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinvideo.VideoServiceCreateVideoArgs)
	realResult := result.(*douyinvideo.VideoServiceCreateVideoResult)
	success, err := handler.(douyinvideo.VideoService).CreateVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateVideoArgs() interface{} {
	return douyinvideo.NewVideoServiceCreateVideoArgs()
}

func newVideoServiceCreateVideoResult() interface{} {
	return douyinvideo.NewVideoServiceCreateVideoResult()
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinvideo.VideoServiceGetFeedArgs)
	realResult := result.(*douyinvideo.VideoServiceGetFeedResult)
	success, err := handler.(douyinvideo.VideoService).GetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFeedArgs() interface{} {
	return douyinvideo.NewVideoServiceGetFeedArgs()
}

func newVideoServiceGetFeedResult() interface{} {
	return douyinvideo.NewVideoServiceGetFeedResult()
}

func getListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinvideo.VideoServiceGetListArgs)
	realResult := result.(*douyinvideo.VideoServiceGetListResult)
	success, err := handler.(douyinvideo.VideoService).GetList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetListArgs() interface{} {
	return douyinvideo.NewVideoServiceGetListArgs()
}

func newVideoServiceGetListResult() interface{} {
	return douyinvideo.NewVideoServiceGetListResult()
}

func mGetVideoUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinvideo.VideoServiceMGetVideoUserArgs)
	realResult := result.(*douyinvideo.VideoServiceMGetVideoUserResult)
	success, err := handler.(douyinvideo.VideoService).MGetVideoUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceMGetVideoUserArgs() interface{} {
	return douyinvideo.NewVideoServiceMGetVideoUserArgs()
}

func newVideoServiceMGetVideoUserResult() interface{} {
	return douyinvideo.NewVideoServiceMGetVideoUserResult()
}

func deleteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinvideo.VideoServiceDeleteVideoArgs)
	realResult := result.(*douyinvideo.VideoServiceDeleteVideoResult)
	success, err := handler.(douyinvideo.VideoService).DeleteVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDeleteVideoArgs() interface{} {
	return douyinvideo.NewVideoServiceDeleteVideoArgs()
}

func newVideoServiceDeleteVideoResult() interface{} {
	return douyinvideo.NewVideoServiceDeleteVideoResult()
}

func getTimeVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinvideo.VideoServiceGetTimeVideosArgs)
	realResult := result.(*douyinvideo.VideoServiceGetTimeVideosResult)
	success, err := handler.(douyinvideo.VideoService).GetTimeVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetTimeVideosArgs() interface{} {
	return douyinvideo.NewVideoServiceGetTimeVideosArgs()
}

func newVideoServiceGetTimeVideosResult() interface{} {
	return douyinvideo.NewVideoServiceGetTimeVideosResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideo(ctx context.Context, req *douyinvideo.CreateVideoRequest) (r *douyinvideo.CreateVideoResponse, err error) {
	var _args douyinvideo.VideoServiceCreateVideoArgs
	_args.Req = req
	var _result douyinvideo.VideoServiceCreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeed(ctx context.Context, req *douyinvideo.GetFeedRequest) (r *douyinvideo.GetFeedResponse, err error) {
	var _args douyinvideo.VideoServiceGetFeedArgs
	_args.Req = req
	var _result douyinvideo.VideoServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetList(ctx context.Context, req *douyinvideo.GetListRequest) (r *douyinvideo.GetListResponse, err error) {
	var _args douyinvideo.VideoServiceGetListArgs
	_args.Req = req
	var _result douyinvideo.VideoServiceGetListResult
	if err = p.c.Call(ctx, "GetList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetVideoUser(ctx context.Context, req *douyinvideo.MGetVideoRequest) (r *douyinvideo.MGetVideoResponse, err error) {
	var _args douyinvideo.VideoServiceMGetVideoUserArgs
	_args.Req = req
	var _result douyinvideo.VideoServiceMGetVideoUserResult
	if err = p.c.Call(ctx, "MGetVideoUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteVideo(ctx context.Context, req *douyinvideo.DeleteVideoRequest) (r *douyinvideo.DeleteVideoResponse, err error) {
	var _args douyinvideo.VideoServiceDeleteVideoArgs
	_args.Req = req
	var _result douyinvideo.VideoServiceDeleteVideoResult
	if err = p.c.Call(ctx, "DeleteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTimeVideos(ctx context.Context, req *douyinvideo.GetTimeVideosRequest) (r *douyinvideo.GetTimeVideosResponse, err error) {
	var _args douyinvideo.VideoServiceGetTimeVideosArgs
	_args.Req = req
	var _result douyinvideo.VideoServiceGetTimeVideosResult
	if err = p.c.Call(ctx, "GetTimeVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
