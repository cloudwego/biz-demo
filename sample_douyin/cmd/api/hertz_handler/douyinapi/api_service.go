// Copyright 2023 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by hertz generator.

package douyinapi

import (
	"context"

	"github.com/cloudwego/biz-demo/sample_douyin/cmd/api/mw"
	"github.com/cloudwego/biz-demo/sample_douyin/cmd/api/service"
	douyinapi "github.com/cloudwego/biz-demo/sample_douyin/hertz_gen/douyinapi"
	"github.com/cloudwego/biz-demo/sample_douyin/pkg/consts"
	"github.com/cloudwego/biz-demo/sample_douyin/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
)

// RegistUser .
// @router /douyin/user/register/ [POST]
func RegistUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.RegistUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewUserService(ctx).RegistUser(req)
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// CheckUser .
// @router /douyin/user/login/ [POST]
func CheckUser(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUser .
// @router /douyin/user/ [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.GetUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	resp, err := service.NewUserService(ctx).GetUser(req)
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// GetFeed .
// @router /douyin/feed/ [GET]
func GetFeed(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	var userId int64 = -1
	if exists {
		userId = user.(*douyinapi.User).ID
	}
	var err error
	var req douyinapi.GetFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewFeedService(ctx).GetFeed(req, userId)
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// GetPublishList .
// @router /douyin/publish/list/ [GET]
func GetPublishList(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}

	var err error
	var req douyinapi.GetPublishListRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewPublishService(ctx).GetPublishList(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// PublishVideo .
// @router /douyin/publish/action/ [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req douyinapi.PublishVideoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}
	resp, err := service.NewPublishService(ctx).PublishVideo(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req douyinapi.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	resp, err := service.NewFavoriteService(ctx).FavoriteAction(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// GetFavoriteList .
// @router /douyin/favorite/list/ [GET]
func GetFavoriteList(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req douyinapi.GetFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewFavoriteService(ctx).GetFavoriteList(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	// log.Println(user, exists)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req douyinapi.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	// log.Println(req, user)
	resp, err := service.NewCommentService(ctx).CommentAction(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewCommentService(ctx).CommentList(req)
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}

	var err error
	var req douyinapi.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewRelationService(ctx).RelationAction(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}

	var err error
	var req douyinapi.FollowAndFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewRelationService(ctx).FollowAndFollowerList(req, user.(*douyinapi.User), 1)
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}

	var err error
	var req douyinapi.FollowAndFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewRelationService(ctx).FollowAndFollowerList(req, user.(*douyinapi.User), 2)
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewRelationService(ctx).FriendList(req)
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req douyinapi.MessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewMessageService(ctx).MessageChat(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req douyinapi.MessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp, err := service.NewMessageService(ctx).MessageAction(req, user.(*douyinapi.User))
	if err != nil {
		SendResponse(c, err, resp)
		return
	}
	SendResponse(c, errno.Success, resp)
}
